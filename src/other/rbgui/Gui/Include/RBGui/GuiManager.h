/*
-----------------------------------------------------------------------------
This source file is part of the Right Brain Games GUI
For the latest info, see http://www.rightbraingames.com/

Copyright (c) 2000-2007 Right Brain Games Inc.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU Lesser General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place - Suite 330, Boston, MA 02111-1307, USA, or go to
http://www.gnu.org/copyleft/lesser.txt.

This software may also be used under the terms of a separate unrestricted license,
provided that you have obtained such a license from Right Brain Games Inc.
-----------------------------------------------------------------------------
*/

#ifndef GUI_GUIMANAGER_H
#define GUI_GUIMANAGER_H

#include "Mocha/Object.h"
#include "Mocha/RefPointer.h"
#include "Mocha/WeakRefPointer.h"

#include "RBGui/WindowAnimator.h"
#include "RBGui/WindowFader.h"
#include "RBGui/TextureManager.h"
#include "RBGui/PlatformManager.h"
#include "RBGui/CursorManager.h"
#include "RBGui/ThemeManager.h"
#include "RBGui/FontManager.h"
#include "RBGui/Window.h"
#include "RBGui/Widget.h"
#include "RBGui/Theme.h"
#include "RBGui/Brush.h"
#include "RBGui/Font.h"

namespace RBGui
{

//--------------------------------
class Core;

//--------------------------------
class GuiManager;
typedef Widget* (*WidgetFactory)( GuiManager* vManager );

//--------------------------------
typedef WindowAnimator* (*WindowAnimatorFactory)( );

//--------------------------------
typedef WindowFader* (*WindowFaderFactory)( );

//--------------------------------
enum FileSelectWindowType
{
	FILESELECTWINDOW_SAVE = 0,
	FILESELECTWINDOW_OPEN
};

//--------------------------------
/// Manages a single Gui and all of its windows/widgets
class GUI_EXPORT GuiManager : public Mocha::Object
{
private:
	Mocha::RefPointer<Brush> mBrush;

	WindowList mWindows;

	Mocha::WeakRefPointer<Window> mFocused;

	Mocha::WeakRefPointer<Widget> mUnderMouse;

	Mocha::RefPointer<CursorManager> mCursorManager;

	Mocha::String mDefaultWindowFader;

	Mocha::String mDefaultWindowAnimator;

	float mClickTimer;

	float mKeyRepeatTimer;

	bool mFirstKeyDelay;

	KeyID mLastKey;

	int mKeyModifiers;

	int mButtonMask;

	void shutdown( );

	void updateCursor( const Mocha::Vector2& vPoint );

	void updateKeyRepeat( float vDelta );

public:
	/// Constructor
	/*! \param vGraphicsManager The graphics manager to use (See TextureManager)
		\param vPlatformManager The platform manager to use (See PlatformManager)
		\param vThemeManager The theme manage to use (See ThemeManager). A default one will be created if one is not provided
		\param vFontManager The font manager to use (See FontManager). A default one will be created if one is not provided */
	GuiManager( Brush* vBrush );

	/// Destructor
	virtual ~GuiManager( );

	/// Gets the window that is under the given 2D screen position
	/*! \return A pointer to the window, or 0 if there is no window under the point */
	Window* findWindowAtPoint( const Mocha::Vector2& vPoint ) const;

	/// Sets the cursor manager to use for this Gui
	void setCursorManager( CursorManager* vManager );

	/// Gets the cursor manager used for this Gui
	CursorManager* getCursorManager( ) const;

	/// Gets the brush interface used by this Gui
	Brush& getBrush( );

	/// Sets the default window animator class name to use
	void setDefaultWindowAnimator( const Mocha::String& vName );

	/// Sets the default window fader class name to use
	void setDefaultWindowFader( const Mocha::String& vName );

	/// Brings a window to the front of the window Z-order
	void bringToFront( Window* vWindow );

	/// Sends a window to the rear of the window Z-order
	void sendToBack( Window* vWindow );

	/// Creates a new widget
	/*! \param vName The name of the class of the widget to create */
	Widget* createWidget( const Mocha::String& vName );

	/// Sets the currently focused window
	/*! \param vWindow The window to give the focus to
		\param vSuppressLost Whether or not to suppress the LostFocus event generated by the change of window focus */
	void setFocused( Window* vWindow, bool vSuppressLost = false );

	/// Gets the currently focused window
	/*! \return The currently focused window, or 0 if there is no focused window */
	Window* getFocused( ) const;

	/// Injects a mouse pressed input event into the GUI
	/*! \param vButtonID The ID of the button pressed. See MouseButtonID
		\param vPoint The position of the mouse */
	bool injectMousePressed( MouseButtonID vButtonID, const Mocha::Vector2& vPoint );

	/// Injects a mouse released input event into the GUI
	/*! \param vButtonID The ID of the button released. See MouseButtonID
		\param vPoint The position of the mouse */
	bool injectMouseReleased( MouseButtonID vButtonID, const Mocha::Vector2& vPoint );

	/// Injects a mouse motion input event into the GUI
	/*! \param vRelative The relative movement of the mouse, in pixels
		\param vPoint The new absolute position of the mouse */
	bool injectMouseMotion( const Mocha::Vector2& vRelative, const Mocha::Vector2& vPoint );

	/// Injects a mouse wheel scroll input event into the GUI
	/*! \param vAmount The amount of the scroll (Usually a value from 1 to -1)
		\param vPoint The absolute position of the mouse */
	bool injectMouseScrolled( float vAmount, const Mocha::Vector2& vPoint );

	/// Injects a key pressed input event into the GUI
	/*! \param vKey The ID of the key pressed (See KeyID) */
	bool injectKeyPressed( KeyID vKey );

	/// Injects a key released input event into the GUI
	/*! \param vKey The ID of the key released (See KeyID) */
	bool injectKeyReleased( KeyID vKey );

	/// Gets a bit mask of all the key modifiers currently pressed (See KeyModifiers)
	int getKeyModifiers( ) const;

	/// Creates a new window
	Window* createWindow( bool vSetFocused = true );

	/// Destroys a window
	void destroyWindow( Window* vWindow );

	/// Find a window with the given name
	/*! \param vName The name of the window to find
		\return The window, or 0 if no window was found */
	Window* findWindow( const Mocha::String& vName ) const;

	/// Gets a list of all the windows in the GUI
	const WindowList& getWindows( ) const;

	/// Draws the GUI
	void draw( ) const;

	/// Clears all windows from the GUI
	void clear( );

	/// Updates the GUI
	void tick( float vDelta );

	/// Invalidates the GUI, causing all windows rectangles to be recalculated. Call this after changing/reloading a theme
	void invalidate( );

	/// Closes all windows with the given tag string
	void closeTagged( const Mocha::String& vTag );

	/// Creates a generic message box window
	/*! \param vTitle The title of the message box
		\param vText The text of the message box
		\param vCallback The callback to use for when the okay button is pressed */
	Window* createMessageBox( const Mocha::String& vTitle, const Mocha::String& vText, GuiCallback* vCallback = 0, const Mocha::Vector2& vMinSize = Mocha::Vector2( 300.0f, 150.0f ) );

	/// Creates a file select window
	/*! \param vTitle The title of the window
		\param vPath The path to start in
		\param vFilter The filter string to use. See DirectoryListWidget::setFilter
		\param vCallback The callback to use when a file has been selected
		\param vType The type of file select window to create. See FileSelectWindowType */
	Window* createFileSelectWindow( const Mocha::String& vTitle, const Mocha::String& vPath, const Mocha::String& vFilter, GuiCallback* vCallback, FileSelectWindowType vType );

	/// Creates a yes/no question window
	/*! \param vTitle The title of the window
		\param vText The text of the window
		\param vButtons A comma delimited string containing the names of the buttons to create (For example, "Yes,No,Maybe")
		\param vCallback The callback to use. The text of the button pressed is passed as the first value of the event data
		\param vSize The size of the window to use */
	Window* createQuestionWindow( const Mocha::String& vTitle, const Mocha::String& vText, const Mocha::String& vButtons, GuiCallback* vCallback, const Mocha::Vector2& vSize = Mocha::Vector2( 300.0f, 150.0f ) );
};

//--------------------------------
GUI_EXPORT extern void AddWindowAnimatorFactory( const Mocha::String& vName, WindowAnimatorFactory vFactory );

//--------------------------------
GUI_EXPORT extern void GetWindowAnimatorFactoryList( Mocha::StringList& vOut );

//--------------------------------
GUI_EXPORT extern void AddWindowFaderFactory( const Mocha::String& vName, WindowFaderFactory vFactory );

//--------------------------------
GUI_EXPORT extern void GetWindowFaderFactoryList( Mocha::StringList& vOut );

//--------------------------------
GUI_EXPORT extern void AddWidgetFactory( const Mocha::String& vName, WidgetFactory vFactory );

//--------------------------------
GUI_EXPORT extern void GetWidgetFactoryList( Mocha::StringList& vOut );

//--------------------------------
GUI_EXPORT extern void Initialize( );

}

#endif
