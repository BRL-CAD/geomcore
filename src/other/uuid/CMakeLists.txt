cmake_minimum_required(VERSION 2.8)

PROJECT(UUID)

include_directories(
	${CMAKE_CURRENT_SOURCE_DIR}
	${CMAKE_CURRENT_BINARY_DIR}
	)

SET(UUID_VERSION_HEX "0x106202")

configure_file(uuid.h.in ${CMAKE_CURRENT_BINARY_DIR}/uuid.h @ONLY)

INCLUDE(CheckFunctionExists)
INCLUDE(CheckIncludeFile)
INCLUDE(CheckIncludeFiles)
INCLUDE(CheckIncludeFileCXX)
INCLUDE(CheckTypeSize)
INCLUDE(CheckLibraryExists)
INCLUDE(CheckStructHasMember)

CHECK_INCLUDE_FILE(arpa/inet.h HAVE_ARPA_INET_H)
CHECK_FUNCTION_EXISTS(clock_gettime HAVE_CLOCK_GETTIME)
CHECK_INCLUDE_FILE(dlfcn.h HAVE_DLFCN_H)
CHECK_INCLUDE_FILE(dmalloc.h HAVE_DMALLOC_H)
CHECK_FUNCTION_EXISTS(getifaddrs HAVE_GETIFADDRS)
CHECK_INCLUDE_FILE(ifaddrs.h HAVE_IFADDRS_H)
CHECK_INCLUDE_FILE(inttypes.h HAVE_INTTYPES_H)
CHECK_LIBRARY_EXISTS(dmalloc dmalloc "" HAVE_LIBDMALLOC)
CHECK_LIBRARY_EXISTS(nsl gethostbyaddr "" HAVE_LIBNSL)
CHECK_LIBRARY_EXISTS(socket socket "" HAVE_LIBSOCKET)
CHECK_TYPE_SIZE("long double" HAVE_LONG_DOUBLE)
CHECK_TYPE_SIZE("long long" HAVE_LONG_LONG)
CHECK_INCLUDE_FILE(memory.h HAVE_MEMORY_H)
CHECK_FUNCTION_EXISTS(nanosleep HAVE_NANOSLEEP)
CHECK_INCLUDE_FILE(netdb.h HAVE_NETDB_H)
CHECK_INCLUDE_FILE(netinet/in.h HAVE_NETINET_IN_H)
CHECK_INCLUDE_FILE(net/if_arp.h HAVE_NET_IF_ARP_H)
CHECK_INCLUDE_FILE(net/if_dl.h HAVE_NET_IF_DL_H)
CHECK_INCLUDE_FILE(net/if.h HAVE_NET_IF_H)
CHECK_FUNCTION_EXISTS(Sleep HAVE_SLEEP)
CHECK_INCLUDE_FILE(stdint.h HAVE_STDINT_H)
CHECK_INCLUDE_FILE(stdlib.h HAVE_STDLIB_H)
CHECK_INCLUDE_FILE(strings.h HAVE_STRINGS_H)
CHECK_INCLUDE_FILE(string.h HAVE_STRING_H)
CHECK_INCLUDE_FILE(sys/time.h HAVE_SYS_TIME_H)
IF(HAVE_SYS_TIME_H)
	SET(CMAKE_EXTRA_INCLUDE_FILES sys/time.h)
ENDIF(HAVE_SYS_TIME_H)
CHECK_TYPE_SIZE("struct timeval" HAVE_STRUCT_TIMEVAL)
CHECK_FUNCTION_EXISTS(gettimeofday HAVE_GETTIMEOFDAY)
SET(CMAKE_EXTRA_INCLUDE_FILES)
CHECK_INCLUDE_FILE(sys/ioctl.h HAVE_SYS_IOCTL_H)
CHECK_INCLUDE_FILE(sys/param.h HAVE_SYS_PARAM_H)
CHECK_INCLUDE_FILE(sys/select.h HAVE_SYS_SELECT_H)
CHECK_INCLUDE_FILE(sys/socket.h HAVE_SYS_SOCKET_H)
CHECK_INCLUDE_FILE(sys/sockio.h HAVE_SYS_SOCKIO_H)
CHECK_INCLUDE_FILE(sys/stat.h HAVE_SYS_STAT_H)
CHECK_INCLUDE_FILE(sys/types.h HAVE_SYS_TYPES_H)
CHECK_INCLUDE_FILE(unistd.h HAVE_UNISTD_H)
CHECK_TYPE_SIZE(char SIZEOF_CHAR)
CHECK_TYPE_SIZE(int SIZEOF_INT)
CHECK_TYPE_SIZE(long SIZEOF_LONG)
CHECK_TYPE_SIZE("long long" SIZEOF_LONG_LONG)
CHECK_TYPE_SIZE(short SIZEOF_SHORT)
CHECK_TYPE_SIZE("unsigned char" SIZEOF_UNSIGNED_CHAR)
CHECK_TYPE_SIZE("unsigned int" SIZEOF_UNSIGNED_INT)
CHECK_TYPE_SIZE("unsigned long" SIZEOF_UNSIGNED_LONG)
CHECK_TYPE_SIZE("unsigned long long" SIZEOF_UNSIGNED_LONG_LONG)
CHECK_TYPE_SIZE("unsigned short" SIZEOF_UNSIGNED_SHORT)
SET(STDC_HEADERS 1)
# whether to build C++ bindings to C API
SET(WITH_CXX 1)
# define if building with Dmalloc
SET(WITH_DMALLOC ${HAVE_LIBDMALLOC})
configure_file(config_cmake.h.in ${CMAKE_CURRENT_BINARY_DIR}/uuid_config.h)

SET(common_uuid_SRCS
	uuid.c
	uuid_md5.c
	uuid_sha1.c
	uuid_prng.c
	uuid_mac.c
	uuid_time.c
	uuid_ui64.c
	uuid_ui128.c
	uuid_str.c
	)

add_library(libuuid ${common_uuid_SRCS})
INSTALL(TARGETS libuuid DESTINATION lib)
add_library(libuuid++ ${common_uuid_SRCS} uuid++.cc)
INSTALL(TARGETS libuuid++ DESTINATION lib)

add_executable(uuid uuid_cli.c)
target_link_libraries(uuid libuuid)
INSTALL(TARGETS uuid DESTINATION bin)

#MAN_NAME    = uuid.3 uuid++.3 uuid.1

